•	Generating binomial coefficient using dynamic programming with 2D array approach will result in lower triangular matrix consisting  
  all intermediate values obtained until required binomial coefficient and efficiency turns out to be O(n*k) for computation of nCk.
•	The advantage of this method is that, if any intermediate binomial coefficient is asked to compute, it can be obtained directly from 
  matrix without re-computing.
•	The second method, by recursive approach, involves 2 recursive calls for computation of C(n-1, k-1) and C(n-1,k) the return values of 
  these calls will be stored in a stack which requires (2n-1)*8 bytes of memory for storage and efficiency is O(2n-1).
•	The disadvantage is that, if several binomial coefficients are to be calculated, the recursive function should be called for each 
  computation reducing time efficiency.
•	The dynamic programming approach using 1D array, every element of array has some value and in next iteration value for those elements
  comes from previous iteration C[j]=C[j]+C[j+1] thus reducing space used compared to 2D and efficiency turns up to be O(k).
•	If only the final binomial coefficient is required, then the 1D approach is most suitable one, but if some intermediate values are 
  needed then 2D approach is best.
